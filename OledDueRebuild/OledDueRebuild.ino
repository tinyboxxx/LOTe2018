
#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>
#include <DueTimer.h>
#include <Wire.h>
#include <TimeLib.h>
#include <DS1307RTC.h>
#include <Adafruit_MLX90614.h>

// temperature Adafruit_MLX90614:
// SCL => 21
// SDA => 20

//Serial0.debug; 
//Serial1.rpm;
//Serial2.GPS;
//Serial3.Wireless;

U8G2_SSD1322_NHD_256X64_F_4W_HW_SPI u8g2(U8G2_R0, /* cs=*/ 10, /* dc=*/ 9, /* reset=*/ 8);	// Enable U8G2_16BIT in u8g2.h

Adafruit_MLX90614 mlx = Adafruit_MLX90614();

#define GCenterX 233 //211-229.5-248
#define GCenterY 21  //0-18-37
#define GCenter18 21 //size
#define GCenter9 11  //half size

bool fastboot=0;
int rpm = 0;
int rpm_last = 0;
int rpm_same = 0;
float spd_hz = 0;
int spd = 0;
int temp = 0;

int GearRatio = 0; //0.43-3.0
int TimeH = 3;
int TimeMM = 59;
int TimeSS = 59;
int GForceX = 0;
int GForceY = 0;
int GForceXScreen = GCenterX - 1;
int GForceYScreen = GCenterY - 1;
int GearRatioCube = 0;
float Volt = 3.30;
long BoostStartTime=0;
int BootedTime=0;
int BootDistance=0;
int BootedDistance=0;

const unsigned char UBX_HEADER[] = {0xB5, 0x62};

struct NAV_PVT
{

    unsigned char cls;
    unsigned char id;
    unsigned short len;
    unsigned long iTOW; // GPS time of week of the navigation epoch (ms)

    unsigned short year;   // Year (UTC)
    unsigned char month;   // Month, range 1..12 (UTC)
    unsigned char day;     // Day of month, range 1..31 (UTC)
    unsigned char hour;    // Hour of day, range 0..23 (UTC)
    unsigned char minute;  // Minute of hour, range 0..59 (UTC)
    unsigned char second;  // Seconds of minute, range 0..60 (UTC)
    char valid;            // Validity Flags (see graphic below)
    unsigned long tAcc;    // Time accuracy estimate (UTC) (ns)
    long nano;             // Fraction of second, range -1e9 .. 1e9 (UTC) (ns)
    unsigned char fixType; // GNSSfix Type, range 0..5
    char flags;            // Fix Status Flags
    char flags2;           // reserved
    unsigned char numSV;   // Number of satellites used in Nav Solution

    long lon;           // Longitude (deg)
    long lat;           // Latitude (deg)
    long height;        // Height above Ellipsoid (mm)
    long hMSL;          // Height above mean sea level (mm)
    unsigned long hAcc; // Horizontal Accuracy Estimate (mm)
    unsigned long vAcc; // Vertical Accuracy Estimate (mm)

    long velN;             // NED north velocity (mm/s)
    long velE;             // NED east velocity (mm/s)
    long velD;             // NED down velocity (mm/s)
    long gSpeed;           // Ground Speed (2-D) (mm/s)
    long headMot;          // Heading of motion 2-D (deg)
    unsigned long sAcc;    // Speed Accuracy Estimate
    unsigned long headAcc; // Heading Accuracy Estimate
    unsigned short pDOP;   // Position dilution of precision
    unsigned short reserved1;
    unsigned long reserved;
    long headVeh;
    short magDec;          // Reserved
    unsigned short magACC; // Reserved
};

NAV_PVT pvt;

void setup(void)
{
    Timer3.attachInterrupt(tictoc); //start tictoc
    Timer3.start(1000000);          // Calls every 1s
    u8g2.begin();                   //from example
    u8g2.clearBuffer();
    mlx.begin();
    //    bootbmp();
    //    u8g2.sendBuffer();
    //    delay(3200);
    //    u8g2.clearBuffer();
    Serial.begin(115200);  //debug
    Serial1.begin(115200); //rpm
    Serial2.begin(115200); //GPS
    Serial3.begin(9600);   //Wireless

}

void loop(void)
{

    //
    //GetNewData
    spd = random(10, 50);
    mlx.readAmbientTempC();
    temp = mlx.readObjectTempC();
    rpm = getNewDataFromRPM();
    GForceX = random(-900, 900);
    GForceY = random(-300, 300);
    GForceXScreen = GForceX / 60 + GCenterX - 1;
    GForceYScreen = GForceY / 60 + GCenterY - 1;
    GearRatio = random(0, 9);//#define GearRatioConstant = 0.17522;
    Volt -= 0.01;
    getNewDataFromGPS();


    // Serial3.print("R");Serial3.print(rpm);Serial3.print("@");
    // Serial.print("R");Serial.print(rpm);Serial.print("@");

    tmElements_t tm;
    int tmi=0;
    tmi++;
    if (tmi / 30 == 1)
    {
        tmi=0;
        if (RTC.read(tm))
        {
            Serial.print("Ok, Time = ");
            print2digits(tm.Hour);
            Serial.write(':');
            print2digits(tm.Minute);
            Serial.write(':');
            print2digits(tm.Second);
            Serial.print(", Date (D/M/Y) = ");
            Serial.print(tm.Day);
            Serial.write('/');
            Serial.print(tm.Month);
            Serial.write('/');
            Serial.print(tmYearToCalendar(tm.Year));
            Serial.println();
        }
        else
        {
            if (RTC.chipPresent())
            {
                Serial.println("The DS1307 is stopped.  Please run the SetTime");
                Serial.println("example to initialize the time and begin running.");
                Serial.println();
            }
            else
            {
                Serial.println("DS1307 read error!  Please check the circuitry.");
                Serial.println();
            }
        }
    }

    //data Process
    if (rpm_last == rpm) //Drop Outdate RPM
    {
        if (rpm_same >= 5)
            rpm = 0;
        else
            rpm_same++;
    }
    else
    {
        rpm=rpm_last;
    }

    if (TimeSS == -1)
    {
        TimeSS = 59;
        TimeMM--;
    }
    if (TimeMM == -1)
    {
        TimeMM = 59;
        TimeH--;
    }
    if (TimeH == -1)
    {
        TimeH = 0;
        TimeMM = 0;
        TimeSS = 0;
    }

//
// frames
//

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x10_tf);
    u8g2.drawStr(109, 7, "Speed");
    u8g2.drawStr(151, 7, " Temp");
    u8g2.drawStr(68, 7, "Gear");
    u8g2.drawStr(0, 64, "RPM:");
    u8g2.drawStr(213, 53, "Gx:");
    u8g2.drawStr(213, 61, "Gy:");
    u8g2.drawStr(0, 7, "Volt");

#define GCenterX 233 //211-229.5-248
#define GCenterY 21  //0-18-37
#define GCenter18 21 //size
#define GCenter9 11  //half size

    //GForceCube:
    u8g2.drawFrame(GCenterX - GCenter18, GCenterY - GCenter18, 2 * GCenter18 + 1, 2 * GCenter18 + 1); //211-229.5-248
    u8g2.drawFrame(GCenterX - GCenter9, GCenterY - GCenter9, 2 * GCenter9 + 1, 2 * GCenter9 + 1);     //220-229.5-239
    u8g2.drawLine(GCenterX, GCenterY - GCenter18, GCenterX, GCenterY - 1);
    u8g2.drawLine(GCenterX, GCenterY + 1, GCenterX, 2 * GCenter18);
    u8g2.drawLine(GCenterX - GCenter18, GCenterY, GCenterX - 1, GCenterY);
    u8g2.drawLine(GCenterX + 1, GCenterY, GCenterX + GCenter18, GCenterY);

    //Temp Cube:
    u8g2.drawFrame(152, 11, 4, 19); //211-229.5-248
    //Gear Cube:
    u8g2.drawFrame(67, 11, 4, 19);  //211-229.5-248
    //Speed Cube:
    u8g2.drawFrame(100, 0, 5, 47);  //211-229.5-248
    u8g2.drawBox(GForceXScreen, GForceYScreen, 3, 3); //GForceBox

    //-----
    //DATAS:
    //----

    //temp
    if (temp > 40)
        u8g2.drawStr(150, 7, "!");
    u8g2.drawBox(153, 30 - map(temp, 20, 60, 1, 19), 2, map(temp, 20, 60, 1, 19));
    //gear
    u8g2.drawBox(68, 30 - map(GearRatio, 0, 9, 1, 19), 2, map(GearRatio, 0, 9, 1, 19));
    //speed
    u8g2.drawBox(101, 47 - map(spd, 0, 60, 1, 47), 3, map(spd, 0, 60, 1, 47));

    u8g2.setFont(u8g2_font_6x10_tf);

    u8g2.setCursor(230, 53);
    if(GForceX>0)
    u8g2.print(0);
    u8g2.print(GForceX); //gforcex
    u8g2.setCursor(230, 61);
    if(GForceY>0)
    u8g2.print(0);
    u8g2.print(GForceY); //gforcey

    u8g2.setCursor(25, 64);
    if (rpm > 999 && rpm <= 4000)
    {
        u8g2.print(rpm); //rpm
    }
    else
    {
        u8g2.print("0000"); //rpm
    }

    u8g2.setFont(u8g2_font_logisoso18_tr);
    u8g2.setCursor(0, 52);
    u8g2.print(TimeH); //time
    u8g2.print(":");
    u8g2.print(TimeMM); //time
    u8g2.print(":");
    u8g2.print(TimeSS); //time
    
    u8g2.setCursor(157, 29);
    u8g2.print(temp);

    if (GearRatio == 0)
    {
        u8g2.setCursor(72, 29);
        u8g2.print("N");
    }
    else
    {
        u8g2.setCursor(72, 29);
        u8g2.print(GearRatio);
    }

    u8g2.setCursor(0, 29);
    u8g2.print(Volt); //battery

    u8g2.setFont(u8g2_font_logisoso34_tn);
    u8g2.setCursor(105, 47); //speed
    u8g2.print(spd);
    u8g2.sendBuffer();



}


/*************************************************************************
//Function to run every seconds
 *************************************************************************/
void tictoc() //倒计时读秒
{
  TimeSS--;
}

/*************************************************************************
//Function to calculate the distance between two waypoints
 *************************************************************************/
float calc_dist(float flat1, float flon1, float flat2, float flon2)
{
    float dist_calc = 0;
    float dist_calc2 = 0;
    float diflat = 0;
    float diflon = 0;

    //I've to spplit all the calculation in several steps. If i try to do it in a single line the arduino will explode.
    diflat = radians(flat2 - flat1);
    flat1 = radians(flat1);
    flat2 = radians(flat2);
    diflon = radians((flon2) - (flon1));

    dist_calc = (sin(diflat / 2.0) * sin(diflat / 2.0));
    dist_calc2 = cos(flat1);
    dist_calc2 *= cos(flat2);
    dist_calc2 *= sin(diflon / 2.0);
    dist_calc2 *= sin(diflon / 2.0);
    dist_calc += dist_calc2;

    dist_calc = (2 * atan2(sqrt(dist_calc), sqrt(1.0 - dist_calc)));

    dist_calc *= 6371000.0; //Converting to meters
    Serial.println(dist_calc);
    return dist_calc;
}

int getNewDataFromRPM(void)
{
    int rpmtemp = 0;
    if (Serial1.available() > 0 && Serial1.read() == 'R')
    {
        rpmtemp = Serial1.readStringUntil('@').toInt();
        if (rpmtemp > 999 && rpmtemp <= 9000)
            return rpmtemp;
    }
}

void getNewDataFromGPS(void)
{

if ( processGPS() ) {
    Serial.print("#SV: ");      Serial.print(pvt.numSV);
    Serial.print(" fixType: "); Serial.print(pvt.fixType);
    Serial.print(" Date:");     Serial.print(pvt.year); Serial.print("/"); Serial.print(pvt.month); Serial.print("/"); 
                                Serial.print(pvt.day); Serial.print(" "); Serial.print(pvt.hour); Serial.print(":"); 
                                Serial.print(pvt.minute); Serial.print(":"); Serial.print(pvt.second);
    Serial.print(" lat/lon: "); Serial.print(pvt.lat/10000000.0f); Serial.print(","); Serial.print(pvt.lon/10000000.0f);
    Serial.print(" gSpeed: ");  Serial.print(pvt.gSpeed/1000.0f);
    Serial.print(" heading: "); Serial.print(pvt.headMot/100000.0f);
    Serial.print(" hAcc: ");    Serial.print(pvt.hAcc/1000.0f);
    Serial.println();
  }
}

void calcChecksum(unsigned char *CK)
{
    memset(CK, 0, 2);
    for (int i = 0; i < (int)sizeof(NAV_PVT); i++)
    {
        CK[0] += ((unsigned char *)(&pvt))[i];
        CK[1] += CK[0];
    }
}

bool processGPS()
{
    static int fpos = 0;
    static unsigned char checksum[2];
    const int payloadSize = sizeof(NAV_PVT);

    while (Serial2.available())
    {
        byte c = Serial2.read();
        if (fpos < 2)
        {
            if (c == UBX_HEADER[fpos])
                fpos++;
            else
                fpos = 0;
        }
        else
        {
            if ((fpos - 2) < payloadSize)
                ((unsigned char *)(&pvt))[fpos - 2] = c;
            fpos++;
            if (fpos == (payloadSize + 2))
                calcChecksum(checksum);
            else if (fpos == (payloadSize + 3))
            {
                if (c != checksum[0])
                    fpos = 0;
            }
            else if (fpos == (payloadSize + 4))
            {
                fpos = 0;
                if (c == checksum[1])
                    return true;
            }
            else if (fpos > (payloadSize + 4))
                fpos = 0;
        }
    }
    return false;
}

void print2digits(int number) {
  if (number >= 0 && number < 10) {
    Serial.write('0');
  }
  Serial.print(number);
}
void SyncGpsTimeToRTC(void)
{
    Serial.print(pvt.year);
    Serial.print(pvt.month);
    Serial.print(pvt.day);
    Serial.print(pvt.hour);
    Serial.print(pvt.minute);
    Serial.print(pvt.second);
}

void bootbmp(void)
{
    static const unsigned char boot_bits[] U8X8_PROGMEM = 
    {
    0x70, 0xa2, 0xe7, 0xe0, 0x21, 0x20, 0x02, 0x8e, 0xa3, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x88, 0xa2, 0x10, 0x21, 0x22, 0x20, 0x02, 0x51, 0xa4, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x88, 0xa2, 0x10, 0x21, 0x22, 0x20, 0x02, 0x51, 0xb4, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0xa2, 0x10, 0x20, 0x52, 0x20, 0x05, 0x50, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0xa2, 0x20, 0xe0, 0x51, 0x20, 0x05, 0x48, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0xa2, 0x47, 0x20, 0x52, 0x20, 0x05, 0x48, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0xa2, 0x80, 0x20, 0x52, 0x20, 0x05, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0xa2, 0x00, 0x21, 0x52, 0x22, 0x05, 0x42, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x88, 0xa2, 0x10, 0x21, 0xfa, 0xa2, 0x0f, 0x42, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x88, 0xa2, 0x10, 0x21, 0x8a, 0xa2, 0x08, 0x41, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x9c, 0xe7, 0xe0, 0x89, 0x9c, 0x08, 0x9f, 0x23, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe0, 0x0f, 0x7f, 0xf0, 0xf1, 0x0f, 0xc3, 0x00, 0xfe, 0xe1, 0x03, 0xf8, 0x03, 0x1f, 0x7c, 0xf0, 0x07,
    0xe0, 0x1f, 0x7f, 0xfc, 0xf3, 0x1f, 0xe3, 0x00, 0xff, 0xf9, 0x07, 0xf8, 0xc7, 0x3f, 0xff, 0xf0, 0x07,
    0x70, 0x9c, 0x03, 0x8e, 0x33, 0x1c, 0x63, 0x00, 0x18, 0x1c, 0x07, 0x1c, 0xe7, 0x38, 0xe3, 0x38, 0x00,
    0x30, 0x9c, 0x01, 0x86, 0x33, 0x1c, 0x33, 0x00, 0x18, 0x0c, 0x07, 0x0c, 0x67, 0xb8, 0xe3, 0x18, 0x00,
    0x30, 0x8c, 0x01, 0x86, 0x39, 0x0c, 0x33, 0x00, 0x18, 0x0c, 0x03, 0x0c, 0x63, 0x98, 0x61, 0x18, 0x00,
    0x38, 0x8e, 0x01, 0x87, 0x19, 0x0c, 0x1b, 0x00, 0x1c, 0x0e, 0x03, 0x8e, 0x73, 0x98, 0x01, 0x18, 0x00,
    0x38, 0xce, 0x01, 0xc7, 0x19, 0x0e, 0x1b, 0x00, 0x0c, 0x8e, 0x03, 0x8e, 0x73, 0xdc, 0x01, 0x1c, 0x00,
    0x18, 0xcf, 0x00, 0xc3, 0x18, 0x0e, 0x0f, 0x00, 0x0c, 0x86, 0x01, 0xc6, 0x33, 0xcc, 0x00, 0x0c, 0x00,
    0x18, 0xc7, 0x1f, 0xc3, 0x1c, 0x06, 0x0f, 0x00, 0x0c, 0x86, 0x01, 0xc6, 0x31, 0xcc, 0x00, 0xfc, 0x01,
    0xfc, 0xc7, 0x8f, 0xff, 0x0c, 0x07, 0x07, 0x00, 0x0e, 0x87, 0x01, 0xff, 0xf9, 0xcf, 0x00, 0xfc, 0x00,
    0xfc, 0xe1, 0x8f, 0xff, 0x0c, 0x07, 0x07, 0x00, 0x06, 0xc3, 0x01, 0x7f, 0xf8, 0xef, 0x00, 0xfe, 0x00,
    0xcc, 0x60, 0x80, 0x61, 0x0e, 0x03, 0x03, 0x00, 0x06, 0xc3, 0x00, 0x33, 0x18, 0x66, 0x00, 0x06, 0x00,
    0xcc, 0x60, 0xc0, 0x61, 0x0e, 0x03, 0x03, 0x00, 0x06, 0xc3, 0x00, 0x33, 0x1c, 0x66, 0x00, 0x06, 0x00,
    0xce, 0x70, 0xc0, 0x61, 0x86, 0x03, 0x03, 0x00, 0x87, 0xe3, 0x80, 0x33, 0x1c, 0x76, 0x00, 0x07, 0x00,
    0xc6, 0x70, 0xc0, 0x70, 0x86, 0x83, 0x03, 0x00, 0x83, 0xe1, 0x80, 0x31, 0x0c, 0x77, 0x10, 0x07, 0x00,
    0xc6, 0x30, 0xc0, 0x30, 0x87, 0x81, 0x01, 0x00, 0x83, 0x61, 0x80, 0x31, 0x0c, 0x33, 0x0c, 0x03, 0x00,
    0xc7, 0x30, 0xe0, 0x30, 0x87, 0x81, 0x01, 0x00, 0x83, 0x61, 0xc0, 0x31, 0x0e, 0x33, 0x0c, 0x03, 0x00,
    0xc7, 0xf8, 0xe7, 0x38, 0xff, 0x80, 0x01, 0x80, 0xc3, 0x3f, 0xc0, 0x31, 0x8e, 0xf3, 0x87, 0x7f, 0x00,
    0xc3, 0xf8, 0x63, 0x38, 0x7f, 0xc0, 0x01, 0x80, 0x81, 0x1f, 0xc0, 0x30, 0x86, 0xf3, 0x83, 0x3f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0xa0, 0x00, 0xfe, 0x00, 0xc8, 0x01, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0xe0, 0x00, 0xaa, 0x00, 0x88, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x7e, 0xe7, 0xbf, 0xee, 0x8e, 0xdc, 0xfd, 0x77, 0x07, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x2a, 0xa1, 0x6a, 0x8a, 0x8a, 0x54, 0x55, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x2e, 0xa2, 0xaa, 0xea, 0x8a, 0x54, 0x5d, 0x75, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xa0, 0x22, 0xa4, 0xaa, 0xaa, 0x8a, 0xd4, 0x45, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xe0, 0x6e, 0xe7, 0xaa, 0xee, 0x8e, 0x1c, 0xdd, 0x75, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
#define boot_width 131
#define boot_height 60
    u8g2.drawXBMP(65, 0, boot_width, boot_height, boot_bits); 
};
